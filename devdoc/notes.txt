*** Managing signal tables ***

  The problem is that POSIX signals are divided into
  the two groups with different properties:

  * Standard ("classic") signals.
    - Older signals have fixed numbers.
    - Newer signals have platform-dependent numbers.
    - The minimal signum is always 1.
    - The signums in this group seems to be rather
      tightly packed.
    - The total number of signals, minimal and maximal
      signums are always known (at compile time).
    Therefore, this group seems to map well onto
    a "list with gaps" concept.

  * Real-time ("new") signals.
    - Minimal and maximal signums are known
      only at run time (and can even change anytime
      as per the specification).
    - At least 8 signals are available (less in real
      life cases -- taken by libpthreads etc).
    - Maximum number of RT signals is not specified,
      so in theory some funky system could support
      several hundreds of them.
    - Within the min and max signums, the signals
      are allocated tightly, i.e. without any gaps.

    As the number of supported RT signals can
    *in theory* be quite large, blindly allocating
    a table for all of them might be undesirable.

    A sorted list + binary search or a hash table
    could be solutions to this.
    binsearch is possibly optimal for a small number
    of handled signals, while hashtable is optimal
    for a large number.

  On the other hand, the vector of all supported
  RT signals is continuous and monotonic, of at least
  8 signals, so we can assume a sane system
  will not support hundreds of RT signals
  (Linux supports 32), and manage lookups of
  RT signals in the same way we manage lookups
  for standard signals, but with floating start/end
  signums.

*** Locking problems ***

* Rationale for "chaining of syncpoints":
  Think about this scenario:
  * Syncpoints manager thread is busy while holding
    no lock (e.g. with sending events).
  * Some thread signals certain syncpoint one or
    several times.
  * Then another thread decides to replace the signal
    handler associated with that syncpoint.
	This will change the owner thread's ID in the
	syncpoint object, but the number of signaled
	events logically pertains to another thread.

*** Sharing of command objects ***

* Handling of command objects bound to event handlers
  should be closely considered: it seems that Tcl_Objs
  cannot be blindly shared between threads; for instance:
  - an event handler of a certain thread locks the list
    of event handlers, gets the command object then
    unlocks the list then executes the command from the
    extracted object while having no locks
    (this is needed as the command might lead to the
    deletion of the event handler which requires
    aqcuisition of the same lock, thus creating
    a deadlock).
  - some other code in the same thread at the same time
    decides to remove the event handler.
    This will require decrementing of the refcount of
    the command object.
    Therefore, the command object might be accessed
    by different threads at the same time with
    unpredictable results (as, for instance,
    Tcl_GlobalEvalObj might change the internal rep.
    of that object).

  There are conceptually only two operations on
  the command object,
  - modification (incl. setting to an empty string);
  - reading.

  Possibly the only way to go is to manage the command
  objects using a separate thread; all modifications
  to the command objects go either via events
  or lock + command + wake + unlock sequence.
  Copying of objects must be employed, i.e. after the
  command object is "sent" to the manager thread,
  the thread which created this object must assume
  it lost the ownership of this object and does not
  control its lifecycle anymore.
  "Getting" of command object out of the controlling
  thread also must employ unconditional cloning
  under the protection of a lock.

* Another look at command object management after
  implementaion of a simplified approach
  made in commit c6c88be4f4706aa78c980db4b51010db5d0c89f1.

  While sharing of the objects at the read/modify time
  seems to be solved, a problem still remains:
  when the event handler executes the command object's
  script, this object is not protected by any locks
  (which is intentional, as that script can delete the
  handler holding the object).
  If at this time another thread decides to replace
  this object in the handler, and decrs its refcount
  (as implemented now), bad things happen.

  The problem is two-fold:
  * On one hand, the thread intending to modify the command
    object must not mess with it when it's not under the lock.
  * The owner thread has the same restriction.

  The solution is unclear.
  * Replace the object w/o decrementing its reference count and
    notify the owner thread that it lost the ownership on
    the handler (with TCL_QUEUE_HEAD)?
  * Implement arbiter thread which owns all the command objects
    and reading/writing of objects goes strictly by copying
    them across that thread boundary (unshared objects can possibly
    be transferred as is, if Tcl has the global object pool).
  * Study how "channel transfer" is implemented in the Thread ext?

