* GetNameFromSignalObj() and GetSignumFromSignalObj()
  should accept NULL as their "interp" argument,
  and fail silently, when the conversion is not
  possible. This is to behave as the standard Tcl
  types do.

* Signal object's SetFromAny is now able to show
  three different error messages depending on the
  path which results in an error reporting:
  two error messages come from GetSignumFromSignalObj
  and GetNameFromSignalObj, the third is generated
  in SetFromAny.

  We should either settle on just one error message
  (by passing NULL to Get*FromObj) or make those
  two functions return sensible lists of allowed
  names and signums, leaving the third error message
  as is, as it is only generated when it was impossible
  to interpret the object neither as an integer,
  nor as a string.

  It might turn out that in the latter case we should
  just panic, as a Tcl object which has an invalid
  string rep and no way to regen it seems to be invalid.

* The hash table for by-signum lookup seems like
  an overkill -- a simple sorted list (with gaps)
  of pointers to signal objects would be OK.

  Note that care should be taken not to stomp on
  existing objects when constructing the table
  as certain signals have several names for the
  same signum.

* Hash table lookup code in sigtables.c accesses
  the internals of the referenced Tcl_Objs
  directly -- devise some private accessor functions
  (macros?) for this.

* Hash table lookup functions should mimic the behaviour
  of Tcl_GetIndexFromObj() and return a proper error
  message which includes all the allowed elements from
  the respective tables.

* Implement [info exists].

  The first should only attempt to parse an integer,
  the second should parse "from any".

* Implement changing signal disposition to
  SIG_DFL and SIG_IGN.

* Think about a robust way to keep signal dispositions
  and the table of syncpoints in sync.

* Provide for listing of POSIX real-time signals
  in the signals[] table.

  The problem is that a) the number of such signals
  is not fixed; b) their min and max numbers are
  not fixed.
  This imples we possibly have to make up a dynamic
  table of signals, or may be move directly to
  storing the "signal objects" instead of just pairs
  of signal name and number.

* Think about saving the "subverted" signal handler
  (returned by sigaction() with non-empty last arg)
  and providing for a) calling of this handler;
  b) restoring it.
  This could be useful for interoperating with
  other signal-handling extensions or even with the core.

* GDB lists a whole lot of signals (via its "info signals"
  command) which signal(7) doesn't mention
  (on Debian Lenny).
  It worth studying whether inclusion of these signals
  is desired or not.

* Looks like our package fails to load after the
  Thread package is loaded while current dir
  appears to be unchanged.

  Indeed, it seems like a subtle problem with Tcl's [load]
  command, as its idea about the current directory
  might be different from that of the system, because after,
  say, the Thread package is loaded,
  [file exists libposixsignal0.1.so] returns 1
  but [load] on a non-qualified name fails, *and* it works
  for the full file name.

* Do we really need signal vector for initialization?
  Currently only creation of the table of event handlers
  could benefit from it, and the elements of the
  table of syncpoints are initially initialized to NULL.
  On the other hand, this might prove as being a more
  universal approach, especially if the table of syncpoints
  will change its format.

